@use "fonts";
@use "variables" as v;
@use "sass:color";
@use "functions" as f;

@layer base {
  :root {
    // ðŸŽ¨ Mode Clair
    @each $name, $value in v.$colors {
      --#{$name}: #{$value};
    }

    // ðŸŽ¨ Mode Sombre (DÃ©fini uniquement si le systÃ¨me est en dark mode)
    @media (prefers-color-scheme: dark) {
      @each $name, $value in v.$colors-dark {
        --#{$name}: #{$value};
      }
    }

    // ðŸŽ¨ GÃ©nÃ©ration automatique des nuances pour light
    @each $name, $color in v.$colors {
      @if ($name != "text-color" and $name != "shadow-color") {
        $baseLightness: color.channel($color, "lightness", $space: hsl);
        $baseHue: color.channel($color, "hue", $space: hsl);
        $baseSaturation: color.channel($color, "saturation", $space: hsl);

        @each $shade, $percent in v.$shades {
          $val: hsl($baseHue $baseSaturation $percent);
          @if ($percent <= $baseLightness and ($percent + 8%) >= $baseLightness) {
            $val: hsl($baseHue $baseSaturation $baseLightness);
          }
          // Envelopper la dÃ©claration pour respecter la nouvelle syntaxe
          & {
            --#{$name}-#{$shade}: #{color.scale($val, $space: hsl)};
          }
        }
      }
    }

    // ðŸŽ¨ GÃ©nÃ©ration automatique des nuances pour dark
    @media (prefers-color-scheme: dark) {
      @each $name, $color in v.$colors-dark {
        @if ($name != "text-color" and $name != "shadow-color") {
          $baseLightness: color.channel($color, "lightness", $space: hsl);
          $baseHue: color.channel($color, "hue", $space: hsl);
          $baseSaturation: color.channel($color, "saturation", $space: hsl);

          @each $shade, $percent in v.$shades {
            $val: hsl($baseHue $baseSaturation $percent);
            @if ($percent <= $baseLightness and ($percent + 8%) >= $baseLightness) {
              $val: hsl($baseHue $baseSaturation $baseLightness);
            }
            & {
              --#{$name}-#{$shade}: #{color.scale($val, $space: hsl)};
            }
          }
        }
      }
    }
  }

  body {
    font-family: fonts.$font1;
    background-color: var(--white);
    color: var(--text-color);
    transition: background-color 0.3s ease, color 0.3s ease;
  }

  input {
    border-radius: f.rem(6);
    padding: f.rem(10) f.rem(16);
    border: solid thin currentColor;
    background-color: var(--neutral);
    color: var(--text-color);
    transition: background-color 0.3s ease, color 0.3s ease;
  }

  button {
    background-color: var(--primary);
    color: var(--white);
    padding: f.rem(10) f.rem(16);
    border: none;
    cursor: pointer;
    transition: background-color 0.3s ease, color 0.3s ease;

    &:hover {
      background-color: var(--primary-700);
    }
  }

  .navbar {
    background-color: var(--white);
    color: var(--white);
  }

  .page-title {
    color: var(--nav-text);
  }

  .tableaubord {
    display: flex;
    justify-content: center;
    flex-direction: row;
    gap: 4rem; // Suppression du gap dupliquÃ©
  }
  .tableau li.icone {
    cursor: pointer;
  }
  .subtitle {
    font-size: f.rem(24);
    font-weight: 700;
    margin-bottom: f.rem(16);
    margin-bottom: 2rem;
  }
  
}
